package com.learn.ai.spring_ai.controller;

import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.prompt.PromptTemplate;
import org.springframework.ai.document.Document;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
public class ICSController {
    private final ChatClient chatClient;
    private final VectorStore vectorStore;
    // Resource for the ICS prompt template.
    @Value("classpath:prompts/ics/ics.st")
    private Resource icsPrompt;

    // Constructor to initialize the ICSController with a ChatClient and VectorStore.
    public ICSController(ChatClient.Builder chatClient, VectorStore vectorStore) {
        this.chatClient = chatClient.build();
        this.vectorStore = vectorStore;
    }

    /**
     * Endpoint to handle questions about the Indian Constitution.
     * It uses a prompt template to generate a response based on the question and similar data from the vector store.
     *
     * @param question The question about the Indian Constitution.
     * @return The response generated by the chat client.
     */
    @GetMapping("/ics")
    public String icsQuestion(@RequestParam String question) {
        // Create a prompt template from the ICS prompt resource
        PromptTemplate template = new PromptTemplate(icsPrompt);
        // Prepare the prompt parameters with the question and similar data
        Map<String, Object> promptParams = new HashMap<>();
        // Set the question as input for the prompt
        promptParams.put("input", question);
        // Find similar data from the vector store based on the question
        promptParams.put("documents", findSimilarData(question));
        // Use the template to create a prompt with the parameters
        return chatClient
                // Use the chat client to send the prompt and get the response
                .prompt(template.create(promptParams))
                .call()
                .content();
    }

    /**
     * Finds similar data in the vector store based on the provided question.
     * It performs a similarity search and returns the formatted content of the found documents.
     *
     * @param question The question to search for similar data.
     * @return A string containing the formatted content of similar documents.
     */
    private String findSimilarData(String question) {
        // Perform a similarity search in the vector store using the question
        List<Document> documents =
                // Use the vector store to find documents similar to the question
                vectorStore.similaritySearch(
                        // Create a search request with the question and top K results
                        SearchRequest.builder()
                                // Set the query to the question
                                .query(question)
                                // Set the number of top results to return
                                .topK(5)
                                .build());
        return documents
                .stream()
                // Map each document to its formatted content
                .map(Document::getFormattedContent)
                // Join the formatted contents into a single string
                .collect(Collectors.joining());
    }
}
